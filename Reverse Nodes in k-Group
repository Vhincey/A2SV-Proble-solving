# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
    
        def reverseLinkedList(head, k):
            prev = None
            curr = head
            while k > 0:
                next_node = curr.next
                curr.next = prev
                prev = curr
                curr = next_node
                k -= 1
            return prev

        dummy = ListNode(0, head)
        end_of_group = dummy
        while True:
            count = 0
            group_start = end_of_group.next
            group_end = group_start
            while group_end and count < k:
                group_end = group_end.next
                count += 1
            if count == k:
                reversed_head = reverseLinkedList(group_start, k)
                end_of_group.next = reversed_head
                group_start.next = group_end
                end_of_group = group_start
            else:
                break

        return dummy.next


     
       
       
