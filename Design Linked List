class MyLinkedList(object):

    def __init__(self):
        self.head = None
        self.size = 0

    def get(self, index):
        """
        :type index: int
        :rtype: int
        """
        if index < 0 or index >= self.size:
            return -1

        if self.head is None:
            return -1

        curr = self.head
        for i in range(index):
            curr = curr.next
        return curr.val

    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            node = self.head
            while node is not None:
                print(node.val)
                node = node.next

    def addAtHead(self, val):
        """
        :type val: int
        :rtype: None
        """
        #self.addAtIndex(0, val)

        node = Node(val)
        curr = self.head
        node.next = curr
        self.head = node   

        self.size += 1 

    def addAtTail(self, val):
        """
        :type val: int
        :rtype: None
        """
        #self.addAtIndex(self.size, val)  
        node = Node(val)

        if not self.head:  
            self.head = node
        else:
            curr = self.head
            while curr.next:  
                curr = curr.next
            curr.next = node  

        self.size += 1

    def addAtIndex(self, index, val):
        """
        :type index: int
        :type val: int
        :rtype: None
        """
        node = Node(val)

        if index < 0 or index > self.size:
            return
        if index == 0:
            self.addAtHead(val)
        else:
            curr = self.head
            for i in range(index - 1):
                curr = curr.next
            node = Node(val)
            node.next = curr.next
            curr.next = node
            self.size += 1
        

    def deleteAtIndex(self, index):
        """
        :type index: int
        :rtype: None/;
        """
        if index < 0 or index >= self.size:
            return

        curr = self.head
        if index == 0:
            self.head = curr.next
        else:
            for i in range(index - 1):
                curr = curr.next
            curr.next = curr.next.next

        self.size -= 1
        

class Node(object):
    def __init__(self, val):
        self.val = val
        self.next = None
        


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
