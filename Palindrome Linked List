# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution(object):
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        # Method 1
        # nums = []
        # while head:
        #     nums.append(head.val)
        #     head = head.next
        
        # l , r = 0 , len(nums) - 1
        # while l <= r:
        #     if nums[l] != nums[r]:
        #         return False
        #     l += 1
        #     r -=1
        # return True

        # Method 2
        fast = head
        slow = head

        # Find middle
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next

        # Reverse second half of the list
        prev = None
        while slow:
            tmp = slow.next
            slow.next = prev
            prev = slow
            slow = tmp

        # Compare values
        left, right = head, prev

        while right:
            if left.val != right.val:
                return False
            left = left.next
            right = right.next
        return True
