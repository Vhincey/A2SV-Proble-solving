# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution(object):
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
       
        fast = head
        slow = head

        # Find middle
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next

        # Reverse second half
        prev = None
        while slow:
            tmp = slow.next
            slow.next = prev
            prev = slow
            slow = tmp

        # Compare the two halfs
        start, end = head, prev

        while end and start:
            if start.val != end.val:
                return False
            start = start.next
            end = end.next
        return True

    

